using System;
using System.Reflection;
using System.Windows;
using System.Windows.Threading;

namespace GuidGenerator {
    public partial class MainWindow :Window {
        private DispatcherTimer autoGenerateTimer;
        private double progressValue;
        private double progressValueDelta;

        public MainWindow() {
            InitializeComponent();
        }

        private void FormLoaded(object sender, RoutedEventArgs e) {
            SetTitle();
            LoadSetting();
            autoGenerateTimer = CreateTimer();
        }

        private DispatcherTimer CreateTimer() {
            DispatcherTimer timer = new DispatcherTimer {
                Interval = new TimeSpan(300000)
            };
            timer.Tick += new EventHandler(Update);

            return timer;
        }

        private void LoadSetting() {
            progressValue = 0;
            progressValueDelta = 3;
        }

        private void Update() {
            progressValue += progressValueDelta;
            Progress.Value = progressValue;

            if (progressValue >= 100) {
                progressValue = 0;

                Generate();
                Copy();
            }
        }

        #region Events
        private void Generate(object sender, RoutedEventArgs e) {
            Generate();
            if (AutoCopyToClipboard.IsChecked == true) {
                Copy();
            }
        }

        private void Copy(object sender, RoutedEventArgs e) {
            Copy();
        }

        private void AutoGenerateEnable(object sender, RoutedEventArgs e) {
            autoGenerateTimer.Start();
            AutoGenerateEnable();
        }

        private void AutoGenerateDisable(object sender, RoutedEventArgs e) {
            autoGenerateTimer.Stop();
            progressValue = 0;
            AutoGenerateDisable();
        }

        private void AutoCopyEnable(object sender, RoutedEventArgs e) {
            AutoCopyEnable();
        }

        private void AutoCopyDisable(object sender, RoutedEventArgs e) {
            AutoCopyDisable();
        }

        private void Update(object sender, EventArgs e) {
            Update();
        }
        #endregion

        private void Generate() {
            bool upperCase = (UpperCase.IsChecked == true);
            bool curlyBrackets = (CurlyBrackets.IsChecked == true);
            string guid = GetGuidString(upperCase, curlyBrackets);
            GeneratedGuid.Text = guid;
        }

        private string GetGuidString(bool upperCase, bool curlyBrackets) {
            string answer = Guid.NewGuid().ToString();
            if (upperCase)
                answer = answer.ToUpper();

            if (curlyBrackets)
                answer = $"{'{'}{answer}{'}'}";

            return answer;
        }

        private void Copy() {
            string textGuid = GeneratedGuid.Text;
            Clipboard.SetText(textGuid);
        }

        #region Visual
        private void SetTitle() {
            Version version = Assembly.GetEntryAssembly().GetName().Version;
            Title = $"{'{'}Guid Generator{'}'} [{version}]";
        }

        private void AutoGenerateEnable() {
            Progress.Visibility = Visibility.Visible;
            Genarate.Visibility = Visibility.Collapsed;
        }

        private void AutoGenerateDisable() {
            Progress.Value = 0;
            Progress.Visibility = Visibility.Collapsed;
            Genarate.Visibility = Visibility.Visible;
        }

        private void AutoCopyEnable() {
            Grid.ColumnDefinitions[1].Width = new GridLength(0);
        }

        private void AutoCopyDisable() {
            Grid.ColumnDefinitions[1].Width = new GridLength(49);
        }
        #endregion
    }
}
